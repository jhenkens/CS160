%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <iostream>
    #define YYDEBUG 1

    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

/* WRITE ME: put all your token definitions here*/
/* WRITE ME: put all your type definitions here*/
/* WRITE ME: put all your precedence/associativity rules here*/

%token BOOL
%token ELSE
%token IF
%token INT
%token WHILE
%token VAR
%token FUNCTION
%token INTARRAY
%token RETURN

%token EQ
%token GT
%token GE
%token LT
%token LE
%token NE
%token AND
%token OR
%token NOT
%token PLUS
%token MINUS
%token MULT
%token DIVIDE

%token TRUE
%token FALSE
%token IDENTIFIER
%token INTEGER

%token SEMICOLON
%token COMMA
%token BAR
%token LBRACE
%token RBRACE
%token RPAREN
%token LPAREN
%token LBRACKET
%token RBRACKET
%token ASSIGN

%union {
    int ival;
    char *sval;
}

%token <ival> INTEGER 
%token <sval> IDENTIFIER


%%

/* WRITE ME: This is the language from Project 1(Calculator). You need
             to put the productions for the grammar for the
             language for this project here*/

Program         :   Function Program2

Program2        :   Function Program2
                |
                ;

ReturnType      : BOOL
                | INT
                ;

ParameterList   : LPAREN RPAREN
                | LPAREN Parameter AdditionalParam RPAREN
                ;

AdditionalParam : COMMA Parameter AdditionalParam
                |
                ;

Parameter       : ReturnType IDENTIFIER
                ;

Function        : FUNCTION ReturnType IDENTIFIER ParameterList FunctionBody
                ;

FunctionBody    : LBRACE BlockContents ReturnStatement RBRACE
                ;

BlockContents   : Declarations NestedFunctions Statements
                ;

DeclTypes       : ReturnType
                | INTARRAY LBRACKET INTEGER RBRACKET
                ;

Declarations    : Declaration Declarations
                |
                ;

Declaration     : VAR DeclTypes IDENTIFIER AddtlIdens SEMICOLON
                ;

AddtlIdens      : COMMA IDENTIFIER AddtlIdens
                |
                ;

NestedFunctions : Function NestedFunctions
                |
                ;

Statements      : Statement Statements
                |
                ;

Statement       :   Assignment
                |   FunctionCall
                |   IfStatement
                |   WhileStatement
                ;

Idens           :   IDENTIFIER
                |   ArrayAccess
                ;

Assignment      :   Idens ASSIGN Expr SEMICOLON
                ;

FunctionCall    :   Idens ASSIGN IDENTIFIER ParameterValues SEMICOLON
                ;

ParameterValues :   LPAREN RPAREN
                |   LPAREN Expr AdditionalVals RPAREN
                ;

AdditionalVals  :   COMMA Expr AdditionalVals
                |
                ;

IfStatement     :   IF LPAREN BoolExpr RPAREN CodeBlock ElseStatement
                ;

ElseStatement   :   ELSE CodeBlock
                |
                ;

WhileStatement  :   WHILE LPAREN BoolExpr RPAREN CodeBlock
                ;

ReturnStatement :   RETURN Expr SEMICOLON
                ;

CodeBlock       :   LBRACE BlockContents RBRACE
                ;

ArrayAccess     : IDENTIFIER LBRACKET INTEGER RBRACKET
                ;

/* Starting Expression Section */
Expr            : BoolExpr
                | ArithExpr
                ;

BoolExpr        : LPAREN BoolExpr RPAREN
                | BoolExpr AND BoolExpr
                | BoolExpr OR BoolExpr
                | ArithExpr LT ArithExpr
                | ArithExpr GT ArithExpr
                | ArithExpr LE ArithExpr
                | ArithExpr GE ArithExpr
                | BoolExpr EQ BoolExpr
                | ArithExpr EQ ArithExpr
                | BoolExpr NE BoolExpr
                | ArithExpr NE ArithExpr
                | TRUE
                | FALSE
                | IDENTIFIER
                | NOT BoolExpr
                ;

ArithExpr       : LPAREN ArithExpr RPAREN
                | ArithExpr PLUS ArithExpr
                | ArithExpr MINUS ArithExpr
                | ArithExpr MULT ArithExpr
                | ArithExpr DIVIDE ArithExpr
                | MINUS ArithExpr
                | INTEGER
                | Idens
                ;


%%

/*You shouldn't have to do anything past this*/

extern int yylineno;

void yyerror(const char *s) {
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    exit(0);
}
